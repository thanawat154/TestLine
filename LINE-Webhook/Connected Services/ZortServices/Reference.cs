//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINE_Webhook.ZortServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineIntegrationModel", Namespace="http://schemas.datacontract.org/2004/07/ZortService")]
    [System.SerializableAttribute()]
    public partial class LineIntegrationModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string channel_accesstokenField;
        
        private string channel_idField;
        
        private string channel_secretField;
        
        private string csField;
        
        private long eventidField;
        
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string channel_accesstoken {
            get {
                return this.channel_accesstokenField;
            }
            set {
                if ((object.ReferenceEquals(this.channel_accesstokenField, value) != true)) {
                    this.channel_accesstokenField = value;
                    this.RaisePropertyChanged("channel_accesstoken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string channel_id {
            get {
                return this.channel_idField;
            }
            set {
                if ((object.ReferenceEquals(this.channel_idField, value) != true)) {
                    this.channel_idField = value;
                    this.RaisePropertyChanged("channel_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string channel_secret {
            get {
                return this.channel_secretField;
            }
            set {
                if ((object.ReferenceEquals(this.channel_secretField, value) != true)) {
                    this.channel_secretField = value;
                    this.RaisePropertyChanged("channel_secret");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string cs {
            get {
                return this.csField;
            }
            set {
                if ((object.ReferenceEquals(this.csField, value) != true)) {
                    this.csField = value;
                    this.RaisePropertyChanged("cs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long eventid {
            get {
                return this.eventidField;
            }
            set {
                if ((this.eventidField.Equals(value) != true)) {
                    this.eventidField = value;
                    this.RaisePropertyChanged("eventid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ZortServices.ILineAtService")]
    public interface ILineAtService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/FollowFriend", ReplyAction="http://tempuri.org/ILineAtService/FollowFriendResponse")]
        string FollowFriend(string uid, string displayname, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/FollowFriend", ReplyAction="http://tempuri.org/ILineAtService/FollowFriendResponse")]
        System.Threading.Tasks.Task<string> FollowFriendAsync(string uid, string displayname, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/UnFollowFriend", ReplyAction="http://tempuri.org/ILineAtService/UnFollowFriendResponse")]
        string UnFollowFriend(string uid, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/UnFollowFriend", ReplyAction="http://tempuri.org/ILineAtService/UnFollowFriendResponse")]
        System.Threading.Tasks.Task<string> UnFollowFriendAsync(string uid, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddMessage", ReplyAction="http://tempuri.org/ILineAtService/AddMessageResponse")]
        string AddMessage(string uid, string displayname, string msg, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddMessage", ReplyAction="http://tempuri.org/ILineAtService/AddMessageResponse")]
        System.Threading.Tasks.Task<string> AddMessageAsync(string uid, string displayname, string msg, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddPicture", ReplyAction="http://tempuri.org/ILineAtService/AddPictureResponse")]
        string AddPicture(string uid, string displayname, string msg, string imageurl, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddPicture", ReplyAction="http://tempuri.org/ILineAtService/AddPictureResponse")]
        System.Threading.Tasks.Task<string> AddPictureAsync(string uid, string displayname, string msg, string imageurl, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddLocation", ReplyAction="http://tempuri.org/ILineAtService/AddLocationResponse")]
        string AddLocation(string uid, string displayname, string msg, string lat, string lng, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddLocation", ReplyAction="http://tempuri.org/ILineAtService/AddLocationResponse")]
        System.Threading.Tasks.Task<string> AddLocationAsync(string uid, string displayname, string msg, string lat, string lng, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddSticker", ReplyAction="http://tempuri.org/ILineAtService/AddStickerResponse")]
        string AddSticker(string uid, string displayname, string msg, string packageid, string stickerid, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/AddSticker", ReplyAction="http://tempuri.org/ILineAtService/AddStickerResponse")]
        System.Threading.Tasks.Task<string> AddStickerAsync(string uid, string displayname, string msg, string packageid, string stickerid, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/InsertLog", ReplyAction="http://tempuri.org/ILineAtService/InsertLogResponse")]
        string InsertLog(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineAtService/InsertLog", ReplyAction="http://tempuri.org/ILineAtService/InsertLogResponse")]
        System.Threading.Tasks.Task<string> InsertLogAsync(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILineAtServiceChannel : LINE_Webhook.ZortServices.ILineAtService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LineAtServiceClient : System.ServiceModel.ClientBase<LINE_Webhook.ZortServices.ILineAtService>, LINE_Webhook.ZortServices.ILineAtService {
        
        public LineAtServiceClient() {
        }
        
        public LineAtServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LineAtServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LineAtServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LineAtServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string FollowFriend(string uid, string displayname, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.FollowFriend(uid, displayname, channel);
        }
        
        public System.Threading.Tasks.Task<string> FollowFriendAsync(string uid, string displayname, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.FollowFriendAsync(uid, displayname, channel);
        }
        
        public string UnFollowFriend(string uid, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.UnFollowFriend(uid, channel);
        }
        
        public System.Threading.Tasks.Task<string> UnFollowFriendAsync(string uid, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.UnFollowFriendAsync(uid, channel);
        }
        
        public string AddMessage(string uid, string displayname, string msg, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddMessage(uid, displayname, msg, reply_token, channel);
        }
        
        public System.Threading.Tasks.Task<string> AddMessageAsync(string uid, string displayname, string msg, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddMessageAsync(uid, displayname, msg, reply_token, channel);
        }
        
        public string AddPicture(string uid, string displayname, string msg, string imageurl, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddPicture(uid, displayname, msg, imageurl, reply_token, channel);
        }
        
        public System.Threading.Tasks.Task<string> AddPictureAsync(string uid, string displayname, string msg, string imageurl, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddPictureAsync(uid, displayname, msg, imageurl, reply_token, channel);
        }
        
        public string AddLocation(string uid, string displayname, string msg, string lat, string lng, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddLocation(uid, displayname, msg, lat, lng, reply_token, channel);
        }
        
        public System.Threading.Tasks.Task<string> AddLocationAsync(string uid, string displayname, string msg, string lat, string lng, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddLocationAsync(uid, displayname, msg, lat, lng, reply_token, channel);
        }
        
        public string AddSticker(string uid, string displayname, string msg, string packageid, string stickerid, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddSticker(uid, displayname, msg, packageid, stickerid, reply_token, channel);
        }
        
        public System.Threading.Tasks.Task<string> AddStickerAsync(string uid, string displayname, string msg, string packageid, string stickerid, string reply_token, LINE_Webhook.ZortServices.LineIntegrationModel channel) {
            return base.Channel.AddStickerAsync(uid, displayname, msg, packageid, stickerid, reply_token, channel);
        }
        
        public string InsertLog(string msg) {
            return base.Channel.InsertLog(msg);
        }
        
        public System.Threading.Tasks.Task<string> InsertLogAsync(string msg) {
            return base.Channel.InsertLogAsync(msg);
        }
    }
}
