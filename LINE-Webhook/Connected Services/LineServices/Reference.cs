//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINE_Webhook.LineServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Merchant", Namespace="http://schemas.datacontract.org/2004/07/LineServices")]
    [System.SerializableAttribute()]
    public partial class Merchant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelAccessTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelSecretField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MerchantNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZortIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelAccessToken {
            get {
                return this.ChannelAccessTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelAccessTokenField, value) != true)) {
                    this.ChannelAccessTokenField = value;
                    this.RaisePropertyChanged("ChannelAccessToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelId {
            get {
                return this.ChannelIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelIdField, value) != true)) {
                    this.ChannelIdField = value;
                    this.RaisePropertyChanged("ChannelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelSecret {
            get {
                return this.ChannelSecretField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelSecretField, value) != true)) {
                    this.ChannelSecretField = value;
                    this.RaisePropertyChanged("ChannelSecret");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MerchantName {
            get {
                return this.MerchantNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MerchantNameField, value) != true)) {
                    this.MerchantNameField = value;
                    this.RaisePropertyChanged("MerchantName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZortId {
            get {
                return this.ZortIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ZortIdField, value) != true)) {
                    this.ZortIdField = value;
                    this.RaisePropertyChanged("ZortId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LineServices.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveEvents", ReplyAction="http://tempuri.org/IService/SaveEventsResponse")]
        long SaveEvents(string channelId, string eventType, string sourceType, string sourceId, string sender, string messageType, string messageText, string replyToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveEvents", ReplyAction="http://tempuri.org/IService/SaveEventsResponse")]
        System.Threading.Tasks.Task<long> SaveEventsAsync(string channelId, string eventType, string sourceType, string sourceId, string sender, string messageType, string messageText, string replyToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterMerchant", ReplyAction="http://tempuri.org/IService/RegisterMerchantResponse")]
        bool RegisterMerchant(string channelId, string zortId, string userId, string merchantName, string channelSecret, string channelAccessToken, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterMerchant", ReplyAction="http://tempuri.org/IService/RegisterMerchantResponse")]
        System.Threading.Tasks.Task<bool> RegisterMerchantAsync(string channelId, string zortId, string userId, string merchantName, string channelSecret, string channelAccessToken, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMerchant", ReplyAction="http://tempuri.org/IService/GetMerchantResponse")]
        LINE_Webhook.LineServices.Merchant GetMerchant(string channelId, string zortId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMerchant", ReplyAction="http://tempuri.org/IService/GetMerchantResponse")]
        System.Threading.Tasks.Task<LINE_Webhook.LineServices.Merchant> GetMerchantAsync(string channelId, string zortId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : LINE_Webhook.LineServices.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<LINE_Webhook.LineServices.IService>, LINE_Webhook.LineServices.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long SaveEvents(string channelId, string eventType, string sourceType, string sourceId, string sender, string messageType, string messageText, string replyToken) {
            return base.Channel.SaveEvents(channelId, eventType, sourceType, sourceId, sender, messageType, messageText, replyToken);
        }
        
        public System.Threading.Tasks.Task<long> SaveEventsAsync(string channelId, string eventType, string sourceType, string sourceId, string sender, string messageType, string messageText, string replyToken) {
            return base.Channel.SaveEventsAsync(channelId, eventType, sourceType, sourceId, sender, messageType, messageText, replyToken);
        }
        
        public bool RegisterMerchant(string channelId, string zortId, string userId, string merchantName, string channelSecret, string channelAccessToken, string remark) {
            return base.Channel.RegisterMerchant(channelId, zortId, userId, merchantName, channelSecret, channelAccessToken, remark);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterMerchantAsync(string channelId, string zortId, string userId, string merchantName, string channelSecret, string channelAccessToken, string remark) {
            return base.Channel.RegisterMerchantAsync(channelId, zortId, userId, merchantName, channelSecret, channelAccessToken, remark);
        }
        
        public LINE_Webhook.LineServices.Merchant GetMerchant(string channelId, string zortId) {
            return base.Channel.GetMerchant(channelId, zortId);
        }
        
        public System.Threading.Tasks.Task<LINE_Webhook.LineServices.Merchant> GetMerchantAsync(string channelId, string zortId) {
            return base.Channel.GetMerchantAsync(channelId, zortId);
        }
    }
}
